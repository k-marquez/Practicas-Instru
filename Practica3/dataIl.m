%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\kevin\A\Instrumentacion\Practicas\Practica3\Medidas\1\ALL0000\F0000CH1.CSV
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2024/02/29 16:47:49

global MedicionesIl Rm T CHANGETIME

%% Initialize variables.
filename = 'C:\Users\kevin\A\Instrumentacion\Practicas\Practica3\Medidas\1\ALL0000\F0000CH1.CSV';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,4,5]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,4,5]);
rawCellColumns = raw(:, [1,3]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
F0000CH1 = table;
F0000CH1.RecordLength = rawCellColumns(:, 1);
F0000CH1.e03 = cell2mat(rawNumericColumns(:, 1));
F0000CH1.VarName3 = rawCellColumns(:, 2);
F0000CH1.VarName4 = cell2mat(rawNumericColumns(:, 2));
F0000CH1.VarName5 = cell2mat(rawNumericColumns(:, 3));

F0000CH1 = F0000CH1(:,4:5);
MedicionesIl = table2array(F0000CH1);
i = MedicionesIl(:,1) >= CHANGETIME  & MedicionesIl(:,1) <= CHANGETIME + T;
MedicionesIl = MedicionesIl(i, 1:2);
MedicionesIl(:,1) = MedicionesIl(:, 1) - MedicionesIl(1, 1);
MedicionesIl(:,2) = MedicionesIl(:,2) / Rm + 4.8e-4; % Diviendo entre resistencia de medición

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;